<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>The Weekend Writeup - Lennart Landsmeer</title><link>https://blog.llandsmeer.com/</link><description>Lennart Landsmeer's Personal Blog</description><lastBuildDate>Fri, 01 Nov 2024 19:25:58 +0000</lastBuildDate><item><title>"Light/dark background in VIM based on current Konsole theme"</title><link>https://blog.llandsmeer.com/tech/2024/11/01/vim-konsole-background.html</link><description>&lt;p&gt;I run konsole, tmux, and edit files in (neo)vim.
When switching themes in konsole, the background changes - and that can make the current colorscheme in vim very ugly.
Vim has a nice option called &lt;code&gt;background&lt;/code&gt; that you can set to either &lt;code&gt;dark&lt;/code&gt; or &lt;code&gt;light&lt;/code&gt; based on the current terminal background.
It does not detect that, you have to set it manually.&lt;/p&gt;
&lt;p&gt;Konsole supports exporting environment variables for each theme, which could make that, in theory easier.
Now tmux complicates the story again. The current terminal does not correspond to any shell konsole is aware of, and you could even …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Fri, 01 Nov 2024 19:25:58 +0000</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2024-11-01:/tech/2024/11/01/vim-konsole-background.html</guid><category>tech</category></item><item><title>"VIM editing setup for LaTeX"</title><link>https://blog.llandsmeer.com/tech/2024/03/21/nvim-tex-open-cite.html</link><description>&lt;h1&gt;Open links for \cite{} commands&lt;/h1&gt;
&lt;p&gt;By lack of a better reference manager, here is a simple code snippet
to open the corresponding doi-link from a &lt;code&gt;\cite{}&lt;/code&gt; command in latex.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt;! OpenDoiForCite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cite_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;cword&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bib_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;globpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;**/*.bib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bib_files&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;grepre&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@[a-z]+{&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cite_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\s*,(\s*[a-z]+\s*=\s*{[^}]+},?\s*)+}&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;grep -zoP &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;grepre&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot; &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matchlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;doi\s*=\s*{\([^}]\+\)}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;doi:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;silent !chromium-browser &amp;quot;https://doi.org/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;&amp;lt;cr&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matchlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Thu, 21 Mar 2024 14:08:46 +0000</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2024-03-21:/tech/2024/03/21/nvim-tex-open-cite.html</guid><category>tech</category></item><item><title>"Printing p-values using unicode superscripts in R"</title><link>https://blog.llandsmeer.com/tech/2021/04/13/pval-unicode.html</link><description>&lt;p&gt;This is a pretty simple one. I wanted to show some nicely formatted p-values on a plot by an external library, but it wasn’t possible to pass anything else than a character vector as labels. So I built this function that formats any p-value using unicode characters. Hopefully it’s of use to others as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;function &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;superscript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{2070}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{00b9}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{00b2}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{00b3}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{2074}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{2075}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{2076}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{2077}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{2078}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\u{2079}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is.na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;return &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%.2f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Tue, 13 Apr 2021 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-13:/tech/2021/04/13/pval-unicode.html</guid><category>tech</category></item><item><title>"No, the ESP32-S2 is not faster at floating point operations (and how do you actually speed up division on the ESP32?)"</title><link>https://blog.llandsmeer.com/tech/2021/04/08/esp32-s2-fpu.html</link><description>&lt;p&gt;For my master's thesis I'm working on computational models of
&lt;a href="https://en.wikipedia.org/wiki/Inferior_olivary_nucleus"&gt;the inferior olivary nucleus&lt;/a&gt;,
a region in the brain involved in motor control and learning.
The lab already produced multi-CPU, multi-GPU and multi-FPGA brain simulators,
and another student and me thought it would be a cute to add a
multi-MCU simulator as well.
In this way we would be able to simulate a scalable &lt;a href="real-time"&gt;real time&lt;/a&gt; inferior olive networks where
rewiring the neural connections
is just reconnecting wires in an electrical circuit and
an oscilloscope is the main tool to analyze the network behaviour (instead of python scripts)
(yes it's …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Thu, 08 Apr 2021 23:24:36 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-08:/tech/2021/04/08/esp32-s2-fpu.html</guid><category>tech</category></item><item><title>"Online presenting in front of your slides with a transparent GTK window and OpenCV"</title><link>https://blog.llandsmeer.com/tech/2021/04/07/webcam-overlay.html</link><description>&lt;p&gt;Today I had to give a presentation on my research for a course to improve my presenting skills.
I thought it would be nice to recreate an in-person presenting environment, instead of my regular
share-slides-and-hear-my-voice-but-don't-see-my-face online presentation. A bit like how
Daniel Shiffman presents &lt;a href="https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw"&gt;The Coding Train&lt;/a&gt; :).&lt;/p&gt;
&lt;p&gt;In zoom, this is a builtin option. Share desktop as your webcam virtual background.
Nice, except they decided not to implement this on linux for some reason (WHY?!).
So I decided to build this myself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: If you just want the code: &lt;a href="#full-code"&gt;click here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are roughly two ways to go about this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Wed, 07 Apr 2021 17:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-07:/tech/2021/04/07/webcam-overlay.html</guid><category>tech</category></item><item><title>"Automatically send all Matplotlib plots to your phone via telegram-send"</title><link>https://blog.llandsmeer.com/tech/2021/04/06/matplotlib-telegram.html</link><description>&lt;p&gt;So I'm not actually sure if this is actually a good idea, but at least its a fun one :).
For my research I usually run long (&amp;gt;20mins) simulations using quickly written scripts
and it would be nice if those scripts automagically notified me when they where ready.
Of course there are clean solutions to this problem, but they would probaly involve adding
extra code to the scripts (which I would have to remember doing everytime!) or black box methods
that would just send a message when a long running python process is done (boring!).&lt;/p&gt;
&lt;p&gt;Instead, everytime when a python script …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Tue, 06 Apr 2021 00:36:00 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-06:/tech/2021/04/06/matplotlib-telegram.html</guid><category>tech</category></item><item><title>"Running SLURM locally on Ubuntu 18.04"</title><link>https://blog.llandsmeer.com/tech/2020/03/02/slurm-single-instance.html</link><description>&lt;p&gt;Today I found myself needing to set up a minimal SLURM cluster
on my laptop for simple testing purposes.
As always, there were some challenges along the way
and I had to consult multiple installation guides and stackoverflow questions
to make everything fit together.
Here is what worked for me.&lt;/p&gt;
&lt;h2&gt;Set up munge&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;munge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Test if it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;munge&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unmunge
STATUS:&lt;span class="w"&gt;           &lt;/span&gt;Success&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Set up MariaDB&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mknoxnv/ubuntu-slurm"&gt;From here&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;mariadb-server
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;root
create&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;slurm_acct_db&lt;span class="p"&gt;;&lt;/span&gt;
create&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slurm&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;password&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slurm&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;password&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slurmdbpass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
grant&lt;span class="w"&gt; &lt;/span&gt;usage&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;*.*&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slurm&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;localhost …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Mon, 02 Mar 2020 15:43:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2020-03-02:/tech/2020/03/02/slurm-single-instance.html</guid><category>tech</category></item><item><title>"Aligning a GWAS to a genetic reference with gwas2cojo.py"</title><link>https://blog.llandsmeer.com/tech/2019/12/28/gwas2cojo.html</link><description>&lt;p&gt;Dealing with a gazillion different undocumented notations and conventions
for writing down variant information is a
common problem in bioinformatics.
Different effect/other alleles, variant names, reference genome build,
chromosome name conventions or just different column names all prevent easy comparison between
genetic variants.
&lt;code&gt;gwas2cojo.py&lt;/code&gt; is there to automatically convert a GWAS to a certain
genetic reference.&lt;/p&gt;
&lt;p&gt;For example,
in my bachelor end project I had to
convert the UKBioBank CAD GWAS dataset to a format
readable by SMR.
Our genetic dataset and UKBioBank had different ideas 
about the allele notation for a given variant.
The effect allele and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sat, 28 Dec 2019 21:07:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-12-28:/tech/2019/12/28/gwas2cojo.html</guid><category>tech</category></item><item><title>"Fast searching in a sorted genetics file &amp; the curse of gzip compression"</title><link>https://blog.llandsmeer.com/tech/2019/12/28/search-sorted.html</link><description>&lt;p&gt;As a bioinformatician,
how often have you found yourself staring at the screen waiting for &lt;code&gt;grep&lt;/code&gt;
to find a certain gene or chromosome-basepair location in a gargantuan vcf, bed or gwas file?
And then realize you forgot adding a field delimiter to your pattern so your search
included way too much results?
Thats a problem I have wanted so solve for a long time.&lt;/p&gt;
&lt;p&gt;Luckily, these files are usually sorted, which means we should be able to use a binary search!
So thats what I wrote this weekend;
a tool you can use to instantly find genomic regions
in anything …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sat, 28 Dec 2019 21:07:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-12-28:/tech/2019/12/28/search-sorted.html</guid><category>tech</category></item><item><title>"Serving precompressed static sites using NGINX to save disk space"</title><link>https://blog.llandsmeer.com/tech/2019/08/29/precompression.html</link><description>&lt;p&gt;I had this idea to build my next ~~app~~ website as a completely static site,
including all user specific content. So no C# ASP / Flask or React, just static files
that get regenerated every so often with a cron job.
The main advantage would be an extremely simple server with nearly instant page loads, and a disadvantage would be more disk usage.
It definitely needs some form of authentication, so I still would have to write
a bit of server code.
But for a proof of concept,
I tried to get nginx to serve precompressed files from disk, as most …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Thu, 29 Aug 2019 21:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-08-29:/tech/2019/08/29/precompression.html</guid><category>tech</category></item><item><title>"Building an UEFI x64 kernel from scratch: A long trip to userspace"</title><link>https://blog.llandsmeer.com/tech/2019/07/21/uefi-x64-userland.html</link><description>&lt;p&gt;When I just started programming, one of my first major projects was building my own kernel.
Of course, I failed misserably. But I learned a lot.
Back then, x64 didn't dominate the market and I never even heard about UEFI.
Copy pasting code bits from tutorials and forum posts I ended up
drawing some things to the screen based on keyboard input.
However, I never managed to get to userspace (/userland/CPL 3).&lt;/p&gt;
&lt;p&gt;Things have changed a bit, and
I decided to finally write a 'modern' UEFI x64 kernel which is able to get to userspace, and document my
progress …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sun, 21 Jul 2019 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-07-21:/tech/2019/07/21/uefi-x64-userland.html</guid><category>tech</category></item><item><title>"Fixing the posix Batch job scheduler by updating its load average limit"</title><link>https://blog.llandsmeer.com/tech/2019/07/19/at-batch-unix.html</link><description>&lt;p&gt;&lt;code&gt;batch(1)&lt;/code&gt; is a little known posix command that
supposedly takes a list of jobs/shell scripts and executes them when the load average of the computer drops below a certain level.
It's far from an ideal scheduler, but it's builtin and does what is should do.
Problem is, the queued commands actually do not execute sometimes.
The load average limit is 1.5 by default,
but I have 6 cores/12 threads, so my load average rises easily above that.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;atd(8)&lt;/code&gt; daemon is responsible for job execution.
Add &lt;code&gt;-l $(your_load_limit)&lt;/code&gt; to the &lt;code&gt;atd&lt;/code&gt; invocation in &lt;code&gt;/etc/systemd …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Fri, 19 Jul 2019 23:02:00 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-07-19:/tech/2019/07/19/at-batch-unix.html</guid><category>tech</category></item><item><title>"Numerical solution of linear PDEs: Computing the Crank-Nicolson matrix automatically"</title><link>https://blog.llandsmeer.com/tech/2019/06/27/crank-nicolson.html</link><description>&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Crank%E2%80%93Nicolson_method"&gt;Crank-Nicolson&lt;/a&gt; method rewrites a discrete time
linear PDE as a matrix multiplication $$\phi_{n+1}=C \phi_n$$.
Nonlinear PDE's pose some additional
problems, but are solvable as well this way (by linearizing every timestep).
A major advantage here
is that going $$k$$ steps into the future is just $$\phi_{n+k}=C^{k}\phi_n$$,
and calculating a &lt;a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.matrix_power.html"&gt;matrix power&lt;/a&gt; is polynomial time.
The method is in general very stable.&lt;/p&gt;
&lt;p&gt;For an assignment I had to construct the Crank-Nicolson
matrix for a simple linear 1 dimension PDE, which had to be derived by hand.
That's a bit labourus, so I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Thu, 27 Jun 2019 01:30:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-06-27:/tech/2019/06/27/crank-nicolson.html</guid><category>tech</category></item><item><title>"Overwrite an existing C/C++ function without LD_PRELOAD hacks"</title><link>https://blog.llandsmeer.com/tech/2019/06/25/overwrite-a-function.html</link><description>&lt;p&gt;In a ~~failed~~ attempt to speed up CPython using a C++ extension,
I found myself looking for a solution to overwrite (monkey patch)
a function in the compiled C code.
On linux, this is normally possible with &lt;code&gt;LD_PRELOAD&lt;/code&gt;,
which enables you to prepend a library in the dynamic linker search path.
When your program requests an external function like &lt;code&gt;malloc&lt;/code&gt;, the dynamic linker
starts searching for it and hopefully finds it in your prepended library.
The program will then call that function instead of the version from say, &lt;code&gt;glibc&lt;/code&gt;.
However, this was not a possibility here, as I wanted to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Tue, 25 Jun 2019 01:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-06-25:/tech/2019/06/25/overwrite-a-function.html</guid><category>tech</category></item><item><title>"Recursive sata structures: Catamorphism with context"</title><link>https://blog.llandsmeer.com/tech/2019/02/16/ctxm.html</link><description>&lt;p&gt;In haskell, the &lt;code&gt;Fix f&lt;/code&gt; data type allows you to specify a recursive datatype from its fixpoint.  Folds and unfolds, as catamorphisms and anamorphisms, come for free. With these &lt;em&gt;recursion schemes&lt;/em&gt;, functions can be specified over the data type without explicit recursion. A catamorphism folds bottom-top to a single value, while its dual the anamorphism can be used to unfold a single value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Fix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Fix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unFix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Fix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;cata&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Functor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Fix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;cata&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cata&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unFix&lt;/span&gt;

&lt;span class="nf"&gt;ana&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Functor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Fix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="nf"&gt;ana&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;coalg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Fix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmap …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sat, 16 Feb 2019 01:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-02-16:/tech/2019/02/16/ctxm.html</guid><category>tech</category></item></channel></rss>