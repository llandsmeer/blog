<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Lennart Landsmeer - Lennart Landsmeer</title><link>https://blog.llandsmeer.com/</link><description></description><lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0100</lastBuildDate><item><title>"Printing p-values using unicode superscripts in R"</title><link>https://blog.llandsmeer.com/tech/2021/04/13/2021-04-13-pval-unicode.html</link><description>&lt;p&gt;This is a pretty simple one. I wanted to show some nicely formatted p-values on a plot by an external library, but it wasn’t possible to pass anything else than a character vector as labels. So I built this function that formats any p-value using unicode characters. Hopefully it …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Tue, 13 Apr 2021 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-13:/tech/2021/04/13/2021-04-13-pval-unicode.html</guid><category>tech</category></item><item><title>"No, the ESP32-S2 is not faster at floating point operations (and how do you actually speed up division on the ESP32?)"</title><link>https://blog.llandsmeer.com/tech/2021/04/08/2021-04-09-esp32-s2-fpu.html</link><description>&lt;p&gt;For my master's thesis I'm working on computational models of
&lt;a href="https://en.wikipedia.org/wiki/Inferior_olivary_nucleus"&gt;the inferior olivary nucleus&lt;/a&gt;,
a region in the brain involved in motor control and learning.
The lab already produced multi-CPU, multi-GPU and multi-FPGA brain simulators,
and another student and me thought it would be a cute to add a
multi-MCU …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Thu, 08 Apr 2021 23:24:36 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-08:/tech/2021/04/08/2021-04-09-esp32-s2-fpu.html</guid><category>tech</category></item><item><title>"Online presenting in front of your slides with a transparent GTK window and OpenCV"</title><link>https://blog.llandsmeer.com/tech/2021/04/07/2021-04-07-webcam-overlay.html</link><description>&lt;p&gt;Today I had to give a presentation on my research for a course to improve my presenting skills.
I thought it would be nice to recreate an in-person presenting environment, instead of my regular
share-slides-and-hear-my-voice-but-don't-see-my-face online presentation. A bit like how
Daniel Shiffman presents &lt;a href="https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw"&gt;The Coding Train&lt;/a&gt; :).&lt;/p&gt;
&lt;p&gt;In zoom, this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Wed, 07 Apr 2021 17:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-07:/tech/2021/04/07/2021-04-07-webcam-overlay.html</guid><category>tech</category></item><item><title>"Automatically send all Matplotlib plots to your phone via telegram-send"</title><link>https://blog.llandsmeer.com/tech/2021/04/06/2021-04-06-matplotlib-telegram.html</link><description>&lt;p&gt;So I'm not actually sure if this is actually a good idea, but at least its a fun one :).
For my research I usually run long (&amp;gt;20mins) simulations using quickly written scripts
and it would be nice if those scripts automagically notified me when they where ready.
Of course there …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Tue, 06 Apr 2021 00:36:00 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2021-04-06:/tech/2021/04/06/2021-04-06-matplotlib-telegram.html</guid><category>tech</category></item><item><title>"Running SLURM locally on Ubuntu 18.04"</title><link>https://blog.llandsmeer.com/tech/2020/03/02/2020-03-02-slurm-single-instance.html</link><description>&lt;p&gt;Today I found myself needing to set up a minimal SLURM cluster
on my laptop for simple testing purposes.
As always, there were some challenges along the way
and I had to consult multiple installation guides and stackoverflow questions
to make everything fit together.
Here is what worked for me …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Mon, 02 Mar 2020 15:43:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2020-03-02:/tech/2020/03/02/2020-03-02-slurm-single-instance.html</guid><category>tech</category></item><item><title>"Aligning a GWAS to a genetic reference with gwas2cojo.py"</title><link>https://blog.llandsmeer.com/tech/2019/12/28/2019-12-28-gwas2cojo.html</link><description>&lt;p&gt;Dealing with a gazillion different undocumented notations and conventions
for writing down variant information is a
common problem in bioinformatics.
Different effect/other alleles, variant names, reference genome build,
chromosome name conventions or just different column names all prevent easy comparison between
genetic variants.
&lt;code&gt;gwas2cojo.py&lt;/code&gt; is there to automatically …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sat, 28 Dec 2019 21:07:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-12-28:/tech/2019/12/28/2019-12-28-gwas2cojo.html</guid><category>tech</category></item><item><title>"Fast searching in a sorted genetics file &amp; the curse of gzip compression"</title><link>https://blog.llandsmeer.com/tech/2019/12/28/2019-12-30-search-sorted.html</link><description>&lt;p&gt;As a bioinformatician,
how often have you found yourself staring at the screen waiting for &lt;code&gt;grep&lt;/code&gt;
to find a certain gene or chromosome-basepair location in a gargantuan vcf, bed or gwas file?
And then realize you forgot adding a field delimiter to your pattern so your search
included way too …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sat, 28 Dec 2019 21:07:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-12-28:/tech/2019/12/28/2019-12-30-search-sorted.html</guid><category>tech</category></item><item><title>"Serving precompressed static sites using NGINX to save disk space"</title><link>https://blog.llandsmeer.com/tech/2019/08/29/2019-08-29-precompression.html</link><description>&lt;p&gt;I had this idea to build my next ~~app~~ website as a completely static site,
including all user specific content. So no C# ASP / Flask or React, just static files
that get regenerated every so often with a cron job.
The main advantage would be an extremely simple server with …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Thu, 29 Aug 2019 21:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-08-29:/tech/2019/08/29/2019-08-29-precompression.html</guid><category>tech</category></item><item><title>"Building an UEFI x64 kernel from scratch: A long trip to userspace"</title><link>https://blog.llandsmeer.com/tech/2019/07/21/2019-07-21-uefi-x64-userland.html</link><description>&lt;p&gt;When I just started programming, one of my first major projects was building my own kernel.
Of course, I failed misserably. But I learned a lot.
Back then, x64 didn't dominate the market and I never even heard about UEFI.
Copy pasting code bits from tutorials and forum posts I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sun, 21 Jul 2019 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-07-21:/tech/2019/07/21/2019-07-21-uefi-x64-userland.html</guid><category>tech</category></item><item><title>"Fixing the posix Batch job scheduler by updating its load average limit"</title><link>https://blog.llandsmeer.com/tech/2019/07/19/2019-07-19-at-batch-unix.html</link><description>&lt;p&gt;&lt;code&gt;batch(1)&lt;/code&gt; is a little known posix command that
supposedly takes a list of jobs/shell scripts and executes them when the load average of the computer drops below a certain level.
It's far from an ideal scheduler, but it's builtin and does what is should do.
Problem is, the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Fri, 19 Jul 2019 23:02:00 +0200</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-07-19:/tech/2019/07/19/2019-07-19-at-batch-unix.html</guid><category>tech</category></item><item><title>"Numerical solution of linear PDEs: Computing the Crank-Nicolson matrix automatically"</title><link>https://blog.llandsmeer.com/tech/2019/06/27/2019-06-27-crank-nicolson.html</link><description>&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Crank%E2%80%93Nicolson_method"&gt;Crank-Nicolson&lt;/a&gt; method rewrites a discrete time
linear PDE as a matrix multiplication $$\phi_{n+1}=C \phi_n$$.
Nonlinear PDE's pose some additional
problems, but are solvable as well this way (by linearizing every timestep).
A major advantage here
is that going $$k$$ steps into the future is just $$\phi_ …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Thu, 27 Jun 2019 01:30:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-06-27:/tech/2019/06/27/2019-06-27-crank-nicolson.html</guid><category>tech</category></item><item><title>"Overwrite an existing C/C++ function without LD_PRELOAD hacks"</title><link>https://blog.llandsmeer.com/tech/2019/06/25/2019-06-26-overwrite-a-function.html</link><description>&lt;p&gt;In a ~~failed~~ attempt to speed up CPython using a C++ extension,
I found myself looking for a solution to overwrite (monkey patch)
a function in the compiled C code.
On linux, this is normally possible with &lt;code&gt;LD_PRELOAD&lt;/code&gt;,
which enables you to prepend a library in the dynamic linker search …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Tue, 25 Jun 2019 01:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-06-25:/tech/2019/06/25/2019-06-26-overwrite-a-function.html</guid><category>tech</category></item><item><title>"Recursive sata structures: Catamorphism with context"</title><link>https://blog.llandsmeer.com/tech/2019/02/16/2019-02-16-ctxm.html</link><description>&lt;p&gt;In haskell, the &lt;code&gt;Fix f&lt;/code&gt; data type allows you to specify a recursive datatype from its fixpoint.  Folds and unfolds, as catamorphisms and anamorphisms, come for free. With these &lt;em&gt;recursion schemes&lt;/em&gt;, functions can be specified over the data type without explicit recursion. A catamorphism folds bottom-top to a single value …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Landsmeer</dc:creator><pubDate>Sat, 16 Feb 2019 01:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.llandsmeer.com,2019-02-16:/tech/2019/02/16/2019-02-16-ctxm.html</guid><category>tech</category></item></channel></rss>